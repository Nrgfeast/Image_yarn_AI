
from fastapi import FastAPI, Request
import base64
from io import BytesIO
from PIL import Image
from openai import OpenAI

app = FastAPI()
client = OpenAI()

COLOR_DESCRIPTIONS = {
    "D2077": "deep wine red",
    "D2073B": "raspberry pink",
    "D2021": "warm terracotta",
    "M125": "soft mint green",
    "D2074": "dusty rose",
    "D2016": "pale beige",
    "D2090": "sky blue",
    "D2013": "light gray",
    "D2125": "soft lavender",
    "D2020": "classic black",
    "D2014": "creamy white",
    "D2078": "deep navy blue"
}

@app.post("/generate_your_item")
async def generate_custom_item(request: Request):
    try:
        data = await request.json()
        print("üü¢ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –≤ /generate_your_item —Å –∫–ª—é—á–∞–º–∏:", list(data.keys()))

        color_code = data.get("color_code")
        base64_image = data.get("image_base64")

        if not base64_image or not color_code:
            print("üî¥ –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç image_base64 –∏–ª–∏ color_code")
            return {"error": "Missing image or color"}

        if color_code not in COLOR_DESCRIPTIONS:
            print(f"üî¥ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ —Ü–≤–µ—Ç–∞: {color_code}")
            return {"error": "Unknown color code"}

        color_text = COLOR_DESCRIPTIONS[color_code]

        # GPT-4o: –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("üì∑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ GPT-4o –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è...")
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": [
                    {"type": "text", "text": "Describe in detail the clothing item in this photo. Emphasize style, texture, shape, and type of garment."},
                    {"type": "image_url", "image_url": {"url": f"data:image/jpeg;base64,{base64_image}"}}
                ]}
            ]
        )
        description = response.choices[0].message.content
        print("üìù GPT-4o –æ–ø–∏—Å–∞–Ω–∏–µ:", description)

        # –ü—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏—è
        prompt = (
            f"Recreate the clothing item based on the following description: {description}. "
            f"The new version should be in {color_text}. Keep the original shape, texture, and style. "
            f"Use a clean studio background. High detail."
        )

        print("üé® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ DALL¬∑E...")
        img_response = client.images.generate(
            model="dall-e-3",
            prompt=prompt,
            n=1,
            size="1024x1024"
        )

        image_url = img_response.data[0].url
        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ:", image_url)
        return {"url": image_url}

    except Exception as e:
        print("üî• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:", e)
        return {"error": f"Failed to generate customized item: {str(e)}"}
